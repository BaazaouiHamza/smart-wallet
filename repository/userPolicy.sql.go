// Code generated by sqlc. DO NOT EDIT.
// source: userPolicy.sql

package repository

import (
	"context"
	"encoding/json"
	"time"
)

const deleteUserPolicy = `-- name: DeleteUserPolicy :exec
DELETE FROM user_policies WHERE id = $1
`

func (q *Queries) DeleteUserPolicy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPolicy, id)
	return err
}

const getUserPolicy = `-- name: GetUserPolicy :one
SELECT up.id, up.name, up.description, up.nym_id, up.recipient, up.created_at, ttp.id, ttp.name, ttp.description, ttp.nym_id, ttp.recipient, ttp.created_at, targeted_balance, amount FROM ONLY user_policies up JOIN transaction_trigger_policies ttp ON up.id=ttp.id
WHERE up.id = $1 LIMIT 1
`

type GetUserPolicyRow struct {
	ID              int64           `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	NymID           string          `json:"nym_id"`
	Recipient       string          `json:"recipient"`
	CreatedAt       time.Time       `json:"created_at"`
	ID_2            int64           `json:"id_2"`
	Name_2          string          `json:"name_2"`
	Description_2   string          `json:"description_2"`
	NymID_2         string          `json:"nym_id_2"`
	Recipient_2     string          `json:"recipient_2"`
	CreatedAt_2     time.Time       `json:"created_at_2"`
	TargetedBalance json.RawMessage `json:"targeted_balance"`
	Amount          json.RawMessage `json:"amount"`
}

func (q *Queries) GetUserPolicy(ctx context.Context, id int64) (GetUserPolicyRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPolicy, id)
	var i GetUserPolicyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NymID,
		&i.Recipient,
		&i.CreatedAt,
		&i.ID_2,
		&i.Name_2,
		&i.Description_2,
		&i.NymID_2,
		&i.Recipient_2,
		&i.CreatedAt_2,
		&i.TargetedBalance,
		&i.Amount,
	)
	return i, err
}

const listUserPolicies = `-- name: ListUserPolicies :many
SELECT id, name, description, nym_id, recipient, created_at FROM user_policies WHERE nym_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserPoliciesParams struct {
	NymID  string `json:"nym_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListUserPolicies(ctx context.Context, arg ListUserPoliciesParams) ([]UserPolicy, error) {
	rows, err := q.db.QueryContext(ctx, listUserPolicies, arg.NymID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPolicy{}
	for rows.Next() {
		var i UserPolicy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NymID,
			&i.Recipient,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
