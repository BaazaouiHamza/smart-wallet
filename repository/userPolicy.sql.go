// Code generated by sqlc. DO NOT EDIT.
// source: userPolicy.sql

package repository

import (
	"context"

	"git.digitus.me/prosperus/protocol/identity"
)

const deleteUserPolicy = `-- name: DeleteUserPolicy :exec
DELETE FROM user_policies WHERE id = $1
`

func (q *Queries) DeleteUserPolicy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPolicy, id)
	return err
}

const getUserPolicy = `-- name: GetUserPolicy :one
SELECT id, name, description, nym_id, recipient, created_at FROM user_policies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserPolicy(ctx context.Context, id int64) (UserPolicy, error) {
	row := q.db.QueryRowContext(ctx, getUserPolicy, id)
	var i UserPolicy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NymID,
		&i.Recipient,
		&i.CreatedAt,
	)
	return i, err
}

const listUserPolicies = `-- name: ListUserPolicies :many
SELECT id, name, description, nym_id, recipient, created_at FROM user_policies WHERE nym_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserPoliciesParams struct {
	NymID  identity.PublicKey `json:"nym_id"`
	Limit  int32              `json:"limit"`
	Offset int32              `json:"offset"`
}

func (q *Queries) ListUserPolicies(ctx context.Context, arg ListUserPoliciesParams) ([]UserPolicy, error) {
	rows, err := q.db.QueryContext(ctx, listUserPolicies, arg.NymID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPolicy{}
	for rows.Next() {
		var i UserPolicy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NymID,
			&i.Recipient,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
