// Code generated by sqlc. DO NOT EDIT.
// source: transactionTriggerPolicy.sql

package db

import (
	"context"
	"encoding/json"
)

const createTransactionTriggerPolicy = `-- name: CreateTransactionTriggerPolicy :one
INSERT INTO transaction_trigger_policy (
  name,
  description,
  nym_id,
  targeted_balance,
  amount
) VALUES (
  $1,$2,$3,$4,$5
) RETURNING id, name, description, nym_id, created_at, targeted_balance, amount
`

type CreateTransactionTriggerPolicyParams struct {
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	NymID           string          `json:"nym_id"`
	TargetedBalance json.RawMessage `json:"targeted_balance"`
	Amount          int32           `json:"amount"`
}

func (q *Queries) CreateTransactionTriggerPolicy(ctx context.Context, arg CreateTransactionTriggerPolicyParams) (TransactionTriggerPolicy, error) {
	row := q.db.QueryRowContext(ctx, createTransactionTriggerPolicy,
		arg.Name,
		arg.Description,
		arg.NymID,
		arg.TargetedBalance,
		arg.Amount,
	)
	var i TransactionTriggerPolicy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NymID,
		&i.CreatedAt,
		&i.TargetedBalance,
		&i.Amount,
	)
	return i, err
}

const deleteTransactionTriggerPolicy = `-- name: DeleteTransactionTriggerPolicy :exec
DELETE FROM transaction_trigger_policy WHERE id = $1
`

func (q *Queries) DeleteTransactionTriggerPolicy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionTriggerPolicy, id)
	return err
}

const getTransactionTriggerPolicy = `-- name: GetTransactionTriggerPolicy :one
SELECT id, name, description, nym_id, created_at, targeted_balance, amount FROM transaction_trigger_policy
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionTriggerPolicy(ctx context.Context, id int64) (TransactionTriggerPolicy, error) {
	row := q.db.QueryRowContext(ctx, getTransactionTriggerPolicy, id)
	var i TransactionTriggerPolicy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NymID,
		&i.CreatedAt,
		&i.TargetedBalance,
		&i.Amount,
	)
	return i, err
}

const listTransactionTriggerPolicies = `-- name: ListTransactionTriggerPolicies :many
SELECT id, name, description, nym_id, created_at, targeted_balance, amount FROM transaction_trigger_policy WHERE nym_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTransactionTriggerPoliciesParams struct {
	NymID  string `json:"nym_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListTransactionTriggerPolicies(ctx context.Context, arg ListTransactionTriggerPoliciesParams) ([]TransactionTriggerPolicy, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionTriggerPolicies, arg.NymID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionTriggerPolicy{}
	for rows.Next() {
		var i TransactionTriggerPolicy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.NymID,
			&i.CreatedAt,
			&i.TargetedBalance,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionTriggerPolicy = `-- name: UpdateTransactionTriggerPolicy :one
UPDATE transaction_trigger_policy 
SET name = $2,
description=$3,
nym_id=$4,
targeted_balance=$5,
amount=$6
WHERE id = $1
RETURNING id, name, description, nym_id, created_at, targeted_balance, amount
`

type UpdateTransactionTriggerPolicyParams struct {
	ID              int64           `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	NymID           string          `json:"nym_id"`
	TargetedBalance json.RawMessage `json:"targeted_balance"`
	Amount          int32           `json:"amount"`
}

func (q *Queries) UpdateTransactionTriggerPolicy(ctx context.Context, arg UpdateTransactionTriggerPolicyParams) (TransactionTriggerPolicy, error) {
	row := q.db.QueryRowContext(ctx, updateTransactionTriggerPolicy,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.NymID,
		arg.TargetedBalance,
		arg.Amount,
	)
	var i TransactionTriggerPolicy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.NymID,
		&i.CreatedAt,
		&i.TargetedBalance,
		&i.Amount,
	)
	return i, err
}
